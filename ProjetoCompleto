import Data.List

type Network = [[[Float]]]

makeList :: Int -> [Float]
makeList 0 = [1.0]
makeList x = 1.0 : (makeList (x-1))

makeMatrix :: Int -> Int -> [[Float]]
makeMatrix 0 y = []
makeMatrix x y = ((makeList y) : (makeMatrix (x-1) y))

createNetwork :: [Int] -> Network
createNetwork [x]       = []
createNetwork (x:y:ys) = (makeMatrix y x) : (createNetwork (y:ys))

-------------------------------------------------------------------

sigmoid :: Float -> Float -> Float
sigmoid x a = 1/(1 + exp(-a*x))

ativacao :: Float -> Float
ativacao a | a < 2 = 0
           | otherwise = 1

calculaAct :: [Float] -> [[Float]] -> (Float->Float) -> [Float]
calculaAct xs [] f      = []
calculaAct xs (y:ys) f  = [f $ sum $ zipWith (*) xs y] ++ calculaAct xs ys f

calcOutput :: [Float] -> Network -> (Float -> Float) -> [[Float]]
calcOutput xs [] f     = []
calcOutput xs (r:rs) f = [resultCamada] ++ calcOutput resultCamada rs f
    where
        resultCamada = calculaAct (xs++[-1.0]) r f
-------------------------------------------------------------------

outputNeuronDeltas :: Float -> Float -> Float
outputNeuronDeltas target output = -(target-output) * output * (1-output)

outputLayerDeltas :: [Float] -> [Float] -> [Float]
outputLayerDeltas targets output = [outputNeuronDeltas t o | (t, o) <- zip targets output]

------------------------------------------------------------------------

neuronDelta :: [Float] -> [Float] -> Float -> Float
neuronDelta weights prevDeltas output = (sum [w*g | (w, g) <- zip weights prevDeltas]) * output * (1-output)

layerDeltas :: [[Float]] -> [Float] -> [Float] -> [Float]
layerDeltas weights prevDeltas outputs = [neuronDelta w prevDeltas s | (w, s) <- zip neurons outputs]
                                          where neurons = [[neuron !! n | neuron <- weights] | n <- [0..length (head weights)-1]]

hiddenLayersDeltas :: Network -> [[Float]] -> [Float] -> [[Float]]
hiddenLayersDeltas _ [] _ = []
hiddenLayersDeltas net outputs lastDeltas = (hiddenLayersDeltas (tail net) (tail outputs) layerDelta) ++ [layerDelta]
                                            where layerDelta = layerDeltas (head net) lastDeltas (head outputs)

-------------------------------------------------------------------------

networkDeltas :: Network -> [[Float]] -> [Float] -> [[Float]]
networkDeltas net outputs targets = (hiddenLayersDeltas revNet (tail revOutput) outputDeltas) ++ [outputDeltas]
                                  where revOutput = reverse outputs
                                        revNet = reverse net
                                        outputDeltas = outputLayerDeltas targets (head revOutput)

-------------------------------------------------------------------------------

neuronGradients :: [Float] -> Float -> [Float]
neuronGradients outputs delta = (map (delta*) outputs) ++ [(-delta)]

layerGradients :: [Float] -> [Float] -> [[Float]]
layerGradients outputs deltas = map (neuronGradients outputs) deltas

calcGradients :: [[Float]] -> [[Float]] -> [[[Float]]]
calcGradients [] _ = []
calcGradients (d:ds) (o:os) = (layerGradients d o) : (calcGradients ds os)

ajustaPesos :: Network -> Float -> [[Float]] -> Network
ajustaPesos net gamma grad = [[zipWith (+) x y | (x, y) <- zip xs ys] | (xs, ys) <- zip net toFloatList]
                           where
                             netlength = map (map (length)) net
                             toFloatList = [[makeLine x y | (x,y) <- zip xs ys]|(xs, ys) <- zip netlength term]
                             term = map (map (* (negate gamma))) grad
                             makeLine 1 value = [value]
                             makeLine x value = 0.0 : (makeLine (x-1) value)

net = [[[0.15,0.20,(-0.35)],[0.25,0.30,(-0.35)]],[[0.40,0.45,(-0.6)],[0.5,0.55,(-0.6)]]] :: Network

target = [0.01,0.99] :: [Float]

input = [0.05, 0.10] :: [Float]

outputs = calcOutput input net (sigmoid 1)
deltas = networkDeltas net outputs target

gradients = calcGradients deltas (input:outputs)
